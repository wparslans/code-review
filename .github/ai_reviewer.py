#!/usr/bin/env python3
"""
PHPCS Commenter - Posts WordPress Coding Standards results as PR comments
"""

import os
import json
import sys
from github import Github, Auth

def main():
    # --- Setup GitHub ---
    github_token = os.getenv("GITHUB_TOKEN")
    if not github_token:
        print("❌ GITHUB_TOKEN not found")
        sys.exit(1)

    g = Github(auth=Auth.Token(github_token))
    repo = g.get_repo(os.getenv("GITHUB_REPOSITORY"))

    # --- Get PR number from event ---
    event_path = os.getenv("GITHUB_EVENT_PATH")
    if not event_path:
        print("❌ GITHUB_EVENT_PATH not found")
        sys.exit(1)

    with open(event_path, 'r') as f:
        event_data = json.load(f)
    
    pr_number = event_data.get('pull_request', {}).get('number')
    if not pr_number:
        print("❌ Could not find PR number in event data")
        sys.exit(1)

    pr = repo.get_pull(pr_number)
    print(f"📝 Processing PR #{pr_number}")

    # --- Load PHPCS Report ---
    phpcs_report_path = "phpcs.json"
    if not os.path.exists(phpcs_report_path):
        print("❌ phpcs.json report file not found")
        sys.exit(1)

    with open(phpcs_report_path, 'r') as f:
        phpcs_report = json.load(f)

    # --- Process PHPCS results by file ---
    total_errors = phpcs_report.get('totals', {}).get('errors', 0)
    total_warnings = phpcs_report.get('totals', {}).get('warnings', 0)
    
    print(f"📊 PHPCS Summary: {total_errors} errors, {total_warnings} warnings")

    # Post summary comment first
    if total_errors > 0 or total_warnings > 0:
        summary_comment = f"""
## 🔍 WordPress Coding Standards Review

### 📊 Summary
- **❌ Errors:** {total_errors}
- **⚠️ Warnings:** {total_warnings}
- **📁 Files with issues:** {len(phpcs_report.get('files', {}))}

### 📝 File-by-file Analysis
Below are the detailed coding standards issues found in each file:
"""
        pr.create_issue_comment(summary_comment)

    # --- Process each file with issues ---
    files_with_issues = 0
    
    for file_path, file_data in phpcs_report.get('files', {}).items():
        # Skip files without messages
        if not file_data.get('messages'):
            continue

        # Group messages by type
        errors = []
        warnings = []
        
        for message in file_data['messages']:
            issue_text = f"- **Line {message['line']}:** {message['message']} (`{message['source']}`)"
            
            if message['type'] == 'ERROR':
                errors.append(issue_text)
            else:
                warnings.append(issue_text)

        # Create file-specific comment
        comment_parts = []
        
        if errors:
            comment_parts.append("### ❌ Errors")
            comment_parts.extend(errors)
        
        if warnings:
            if errors:
                comment_parts.append("")  # Add spacing
            comment_parts.append("### ⚠️ Warnings")
            comment_parts.extend(warnings)

        if comment_parts:
            full_comment = f"""
## 📄 PHPCS Issues in `{file_path}`

{chr(10).join(comment_parts)}

---
*Auto-generated by WordPress Coding Standards review*
"""
            try:
                pr.create_issue_comment(full_comment)
                files_with_issues += 1
                print(f"✅ Posted PHPCS issues for {file_path}")
            except Exception as e:
                print(f"❌ Failed to post comment for {file_path}: {e}")

    # --- Final summary ---
    if files_with_issues == 0 and (total_errors > 0 or total_warnings > 0):
        pr.create_issue_comment("## ✅ No specific file comments to post, but issues were found in the PHPCS report.")
    
    if total_errors == 0 and total_warnings == 0:
        pr.create_issue_comment("""
## ✅ WordPress Coding Standards Review

🎉 **Excellent!** No coding standards issues found.

All code follows WordPress Coding Standards perfectly.
""")

    print(f"🎉 PHPCS commenting completed. Processed {files_with_issues} files with issues.")

if __name__ == "__main__":
    main()